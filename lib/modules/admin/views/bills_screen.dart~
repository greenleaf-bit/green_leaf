import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class BillScreen extends StatelessWidget {
  const BillScreen({super.key});

  Future<List<Map<String, dynamic>>> fetchOrdersWithUsers() async {
    final FirebaseFirestore firestore = FirebaseFirestore.instance;
    List<Map<String, dynamic>> allOrders = [];

    // ðŸ”¹ Get all orders
    QuerySnapshot ordersSnapshot = await firestore.collection('orders').get();

    for (var orderDoc in ordersSnapshot.docs) {
      final orderData = orderDoc.data() as Map<String, dynamic>? ?? {};
      final userUid = orderData['userId']; // userId = uid in your structure

      String customerName = "Unknown";
      int customerId = 0;

      if (userUid != null) {
        final userSnapshot = await firestore
            .collection('users')
            .where('uid', isEqualTo: userUid)
            .get();

        if (userSnapshot.docs.isNotEmpty) {
          final userData = userSnapshot.docs.first.data();
          customerName = userData['fullname'] ?? 'Unknown';
          customerId = userData['id'] ?? 0;
        }
      }

      allOrders.add({
        'order': orderData,
        'customerName': customerName,
        'customerId': customerId,
      });
    }

    return allOrders;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0XFFC4D0C0),
      appBar: AppBar(
        backgroundColor: const Color(0XFFC4D0C0),
        centerTitle: true,
        title: Text(
          "Invoices",
          style: GoogleFonts.inter(
            fontSize: 20,
            fontWeight: FontWeight.w600,
            color: const Color(0XFF476C2F),
          ),
        ),
        leading: Padding(
          padding: const EdgeInsets.only(left: 10, top: 5, bottom: 5),
          child: Container(
            decoration: const BoxDecoration(
              color: Color(0XFF476C2F),
              shape: BoxShape.circle,
            ),
            child: IconButton(
              icon: const Icon(
                Icons.arrow_back_ios_new,
                color: Colors.white,
                size: 18,
              ),
              onPressed: () => Navigator.pop(context),
            ),
          ),
        ),
      ),
      body: FutureBuilder<List<Map<String, dynamic>>>(
        future: fetchOrdersWithUsers(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(
                child:
                CircularProgressIndicator(color: Color(0XFF476C2F)));
          }

          if (snapshot.hasError) {
            return Center(
                child: Text("Error: ${snapshot.error}",
                    style: const TextStyle(color: Colors.red)));
          }

          final ordersData = snapshot.data ?? [];

          if (ordersData.isEmpty) {
            return const Center(
              child: Text("No Invoices Found"),
            );
          }

          return ListView.builder(
            padding: const EdgeInsets.all(20),
            itemCount: ordersData.length,
            itemBuilder: (context, index) {
              final orderData = ordersData[index];
              final order = orderData['order'];
              final items = (order['items'] ?? []) as List<dynamic>;

              return _buildOrderCard(
                order,
                items,
                orderData['customerId'],
                orderData['customerName'],
              );
            },
          );
        },
      ),
    );
  }

  Widget _buildOrderCard(
      Map<String, dynamic> order,
      List items,
      int customerId,
      String customerName,
      ) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: const Color(0XFF456B2E).withOpacity(0.53)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // ðŸ§¾ Customer Info
          Column(
            children: [
              Row(
                children: [
                  Text(
                    "Customer ID: ",
                    style: GoogleFonts.inter(
                      fontSize: 10,
                      fontWeight: FontWeight.w500,
                      color: const Color(0XFF454545),
                    ),
                  ),
                  Text(
                    "$customerId",
                    style: GoogleFonts.inter(
                      fontSize: 10,
                      fontWeight: FontWeight.w500,
                      color: const Color(0XFF428DFF),
                    ),
                  ),
                ],
              ),

              Row(
                children: [
                  Text(
                    "Customer Name: ",
                    style: GoogleFonts.inter(
                      fontSize: 10,
                      fontWeight: FontWeight.w500,
                      color: const Color(0XFF454545),
                    ),
                  ),
                  Text(
                    customerName,
                    style: GoogleFonts.inter(
                      fontSize: 10,
                      fontWeight: FontWeight.w500,
                      color: const Color(0XFF428DFF),
                    ),
                  )
                ],
              ),

            ],
          ),
          const SizedBox(height: 10),
Row(children: [
  SizedBox(width: 70,),
  Text("Items",style: GoogleFonts.inter(
    fontSize: 10,
    fontWeight: FontWeight.w500,
    color: Color(0XFF454545),
  ),),SizedBox(width:100,),
  Text("Quantity",style: GoogleFonts.inter(
    fontSize: 10,
    fontWeight: FontWeight.w500,
    color: Color(0XFF454545),
  ),),SizedBox(width:10,),
  Text("Total Amount",style: GoogleFonts.inter(
    fontSize: 10,
    fontWeight: FontWeight.w500,
    color: Color(0XFF454545),
  ),),],),
          // ðŸŸ¢ Order Items
          Column(
            children: items.map((item) {
              return Padding(
                padding: const EdgeInsets.symmetric(vertical: 6),
                child: Row(
                  children: [
                    ClipRRect(
                      borderRadius: BorderRadius.circular(8),
                      child: Image.network(
                        item['imageUrl'] ?? "https://via.placeholder.com/50",
                        height: 50,
                        width: 50,
                        fit: BoxFit.cover,
                      ),
                    ),
                    const SizedBox(width: 10),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          "Name: ${item['name'] ?? '-'}",
                          style: GoogleFonts.inter(
                            fontSize: 10,
                            fontWeight: FontWeight.w500,
                            color: const Color(0XFF9D9999),
                          ),
                        ),
                        Text(
                          "Price: ${item['price'] ?? '-'} OMR",
                          style: GoogleFonts.inter(
                            fontSize: 10,
                            fontWeight: FontWeight.w500,
                            color: const Color(0XFF9D9999),
                          ),
                        ),
                      ],
                    ),
                    const Spacer(),
                    Text(
                      "x ${item['quantity'] ?? '-'}",
                      style: GoogleFonts.inter(
                        fontSize: 10,
                        fontWeight: FontWeight.w500,
                        color: const Color(0XFF9D9999),
                      ),
                    ),
                    const SizedBox(width: 40),
                    Text(
                      "${item['totalPrice'] ?? '-'} OMR",
                      style: GoogleFonts.inter(
                        fontSize: 10,
                        fontWeight: FontWeight.w500,
                        color: const Color(0XFF9D9999),
                      ),
                    ),
                  ],
                ),
              );
            }).toList(),
          ),

          const Divider(thickness: 1, color: Color(0XFF9D9D9D)),

          // ðŸŸ¢ Order Total & Fees
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                "Delivery Fee: ${order['deliveryFee'] ?? '0'} OMR\n"
                    "Service Fee: ${order['serviceFee'] ?? '0'} OMR",
                style: GoogleFonts.inter(
                  fontSize: 10,
                  fontWeight: FontWeight.w500,
                  color: Color(0XFF9D9999),
                ),
              ),
              Text(
                "${order['totalAmount'] ?? '0'} OMR",
                style: GoogleFonts.inter(
                  fontSize: 10,
                  fontWeight: FontWeight.w500,
                  color: Colors.black,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
